// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id String @id @default(uuid())
  nome String
  cnpj String @unique
  email String @unique
  senha String
  foto String?
  endereco String?
  telefone String?
  token_vinculo String @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime @updatedAt

  @@map("empresas")
  funcionarios Funcionario[] 
  produtos Produto[]
}

model Funcionario {
  id String @id @default(uuid())
  nome String
  email String @unique
  senha String
  employed Boolean @default(false)
  foto String?
  
  // movimentacoes Movimentacao[]

  createdAt DateTime? @default(now())
  updatedAt DateTime @updatedAt

  empresa Empresa? @relation(fields: [empresa_id], references: [id])

  @@map("funcionarios")
  empresa_id String? 
}

model Category {
  id String @id @default(uuid())
  name String @unique

  created_at DateTime? @default(now())
  updated_at DateTime @updatedAt

  @@map("categorias")
  produtos Produto[]
}

model Produto {
  id String @id @default(uuid())
  nome String
  descricao String?
  preco Int
  foto String
  quantidade Int @default(0)
  
  // estoque_minimo Int
  // movimentacoes Movimentacao[]

  createdAt DateTime? @default(now())
  updatedAt DateTime @updatedAt

  categoria Category @relation(fields: [categoria_id], references: [id])
  empresa Empresa @relation(fields: [empresa_id], references: [id])

  @@map("produtos")
  empresa_id String
  categoria_id String
}

// model Movimentacao {
//   id String @id @default(uuid())
//   tipo String
//   quantidade Int
//   produto_id Int
//   produto Produto @relation(fields: [produto_id], references: [id])
//   funcionario_id String
//   funcionario Funcionario @relation(fields: [funcionario_id], references: [id])
//   data DateTime @default(now())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("movimentacoes")
// }